// controllers/emailController.js
const fs = require("fs");
const { TOKEN_PATH } = require("../utils/auth");

const gmailService = require("../services/gmailService");
const openaiService = require("../services/openaiService");
const calendarController = require("./calendarController");
const { sendMessage, bot } = require("../utils/bot");
const logger = require("../utils/logger");
const senderStore = require("../utils/senderStore");
const categoryStore = require("../utils/categoryStore");

const pendingEmails = {};
const emailTimestamps = {};
const telegramChatId = process.env.TELEGRAM_CHAT_ID;

const settings = {
  updateInterval: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω
  dailySummaryTime: { hour: 18, minute: 0 }, // 18:00
  maxEmailsPerCheck: 20,
};

let emailCheckIntervalId = null;
let dailySummaryTimeoutId = null;
let dailySummaryIntervalId = null;

async function checkEmail() {
  try {
    const messages = await gmailService.getUnreadEmails();

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
    const newMessages = messages.filter(
      (message) => !pendingEmails.hasOwnProperty(message.id)
    );

    // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤
    const availableSlots =
      settings.maxEmailsPerCheck - Object.keys(pendingEmails).length;
    const messagesToProcess = newMessages.slice(0, availableSlots);

    for (const message of messagesToProcess) {
      const emailDetails = await gmailService.getEmailDetails(message.id);
      const { id, sender, subject, date, content } = emailDetails;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞
      pendingEmails[id] = { sender, subject, date, content, id, emailDetails };
      emailTimestamps[id] = Date.now();

      await askForAction(emailDetails);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø–æ–Ω–∞–¥ 1 –¥–µ–Ω—å
    const oneDayInMillis = 24 * 60 * 60 * 1000;
    for (const emailId in emailTimestamps) {
      if (Date.now() - emailTimestamps[emailId] >= oneDayInMillis) {
        // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º
        delete pendingEmails[emailId];
        delete emailTimestamps[emailId];
      }
    }

    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—à—Ç–∏:", error);
  }
}
function scheduleDailySummary() {
  if (dailySummaryTimeoutId) {
    clearTimeout(dailySummaryTimeoutId);
  }
  if (dailySummaryIntervalId) {
    clearInterval(dailySummaryIntervalId);
  }

  const now = new Date();
  const nextTime = new Date();
  nextTime.setHours(settings.dailySummaryTime.hour);
  nextTime.setMinutes(settings.dailySummaryTime.minute);
  nextTime.setSeconds(0);

  if (now > nextTime) {
    // –Ø–∫—â–æ —á–∞—Å —É–∂–µ –ø—Ä–æ–π—à–æ–≤, –ø–ª–∞–Ω—É—î–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
    nextTime.setDate(nextTime.getDate() + 1);
  }

  const timeUntilNext = nextTime - now;

  dailySummaryTimeoutId = setTimeout(() => {
    sendDailySummary();

    // –ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏
    dailySummaryIntervalId = setInterval(() => {
      sendDailySummary();
    }, 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏
  }, timeUntilNext);

  logger.info(
    `–©–æ–¥–µ–Ω–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ ${settings.dailySummaryTime.hour}:${
      settings.dailySummaryTime.minute < 10
        ? "0" + settings.dailySummaryTime.minute
        : settings.dailySummaryTime.minute
    }.`
  );
}

async function sendDailySummary() {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª–∏—Å—Ç–∏, –æ—Ç—Ä–∏–º–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ
  const messages = await gmailService.getEmailsReceivedToday();

  if (messages.length === 0) {
    await sendMessage(telegramChatId, "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤.");
    return;
  }

  let summaryMessage = `–ü—ñ–¥—Å—É–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ—ó –ø–æ—à—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤: ${messages.length}\n\n`;

  for (const message of messages) {
    const emailDetails = await gmailService.getEmailDetails(message.id);
    if (emailDetails) {
      const formattedDate = emailDetails.date.toLocaleString();
      summaryMessage += `üìß **–í—ñ–¥:** ${emailDetails.sender}\n**–¢–µ–º–∞:** ${emailDetails.subject}\n**–î–∞—Ç–∞:** ${formattedDate}\n\n`;
    }
  }

  const options = {
    parse_mode: "Markdown",
  };

  await sendMessage(telegramChatId, summaryMessage, options);
}
// async function checkEmail() {
//   try {
//     const messages = await gmailService.getUnreadEmails();

//     // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
//     const newMessages = messages.filter(
//       (message) => !pendingEmails.hasOwnProperty(message.id)
//     );

//     // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤
//     const availableSlots =
//       settings.maxEmailsPerCheck - Object.keys(pendingEmails).length;
//     const messagesToProcess = newMessages.slice(0, availableSlots);

//     for (const message of messagesToProcess) {
//       const emailDetails = await gmailService.getEmailDetails(message.id);
//       const { id, sender, subject, date, content } = emailDetails;

//       // –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –¥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É
//       dailyEmails.push({
//         id,
//         sender,
//         subject,
//         date,
//       });

//       // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞
//       pendingEmails[id] = { sender, subject, date, content, id, emailDetails };
//       emailTimestamps[id] = Date.now();

//       await askForAction(emailDetails);
//     }

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø–æ–Ω–∞–¥ 1 –¥–µ–Ω—å
//     const oneDayInMillis = 24 * 60 * 60 * 1000;
//     for (const emailId in emailTimestamps) {
//       if (Date.now() - emailTimestamps[emailId] >= oneDayInMillis) {
//         // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º
//         delete pendingEmails[emailId];
//         delete emailTimestamps[emailId];
//       }
//     }

//     logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
//   } catch (error) {
//     logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—à—Ç–∏:", error);
//   }
// }

// function startEmailChecking() {
//   if (emailCheckIntervalId) {
//     clearInterval(emailCheckIntervalId);
//   }
//   emailCheckIntervalId = setInterval(() => {
//     checkEmail();
//   }, settings.updateInterval);
//   logger.info(
//     `–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—à—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${
//       settings.updateInterval / 60000
//     } —Ö–≤–∏–ª–∏–Ω.`
//   );
// }

// function scheduleDailySummary() {
//   if (dailySummaryTimeoutId) {
//     clearTimeout(dailySummaryTimeoutId);
//   }
//   if (dailySummaryIntervalId) {
//     clearInterval(dailySummaryIntervalId);
//   }

//   const now = new Date();
//   const nextTime = new Date();
//   nextTime.setHours(settings.dailySummaryTime.hour);
//   nextTime.setMinutes(settings.dailySummaryTime.minute);
//   nextTime.setSeconds(0);

//   if (now > nextTime) {
//     // –Ø–∫—â–æ —á–∞—Å —É–∂–µ –ø—Ä–æ–π—à–æ–≤, –ø–ª–∞–Ω—É—î–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
//     nextTime.setDate(nextTime.getDate() + 1);
//   }

//   const timeUntilNext = nextTime - now;

//   dailySummaryTimeoutId = setTimeout(() => {
//     sendDailySummary();

//     // –ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏
//     dailySummaryIntervalId = setInterval(() => {
//       sendDailySummary();
//     }, 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏
//   }, timeUntilNext);

//   logger.info(
//     `–©–æ–¥–µ–Ω–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ ${settings.dailySummaryTime.hour}:${
//       settings.dailySummaryTime.minute < 10
//         ? "0" + settings.dailySummaryTime.minute
//         : settings.dailySummaryTime.minute
//     }.`
//   );
// }

// async function sendDailySummary() {
//   if (dailyEmails.length === 0) {
//     await sendMessage(telegramChatId, "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤.");
//     return;
//   }

//   let summaryMessage = `–ü—ñ–¥—Å—É–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ—ó –ø–æ—à—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤: ${dailyEmails.length}\n\n`;

//   for (const email of dailyEmails) {
//     const formattedDate = email.date.toLocaleString();
//     summaryMessage += `üìß **–í—ñ–¥:** ${email.sender}\n**–¢–µ–º–∞:** ${email.subject}\n**–î–∞—Ç–∞:** ${formattedDate}\n\n`;
//   }

//   const options = {
//     parse_mode: "Markdown",
//   };

//   await sendMessage(telegramChatId, summaryMessage, options);

//   // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—ñ–¥—Å—É–º–∫—É
//   dailyEmails.length = 0;
// }

// async function checkEmail() {
//   try {
//     const messages = await gmailService.getUnreadEmails();

//     // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
//     const newMessages = messages.filter(
//       (message) => !pendingEmails.hasOwnProperty(message.id)
//     );

//     // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤
//     const availableSlots =
//       settings.maxEmailsPerCheck - Object.keys(pendingEmails).length;
//     const messagesToProcess = newMessages.slice(0, availableSlots);

//     for (const message of messagesToProcess) {
//       const emailDetails = await gmailService.getEmailDetails(message.id);
//       const { id, sender, subject, date, content } = emailDetails;

//       // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞
//       pendingEmails[id] = { sender, subject, date, content, id, emailDetails };
//       emailTimestamps[id] = Date.now();

//       await askForAction(emailDetails);
//     }

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø–æ–Ω–∞–¥ 1 –¥–µ–Ω—å
//     const oneDayInMillis = 24 * 60 * 60 * 1000;
//     for (const emailId in emailTimestamps) {
//       if (Date.now() - emailTimestamps[emailId] >= oneDayInMillis) {
//         // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º
//         delete pendingEmails[emailId];
//         delete emailTimestamps[emailId];
//       }
//     }

//     logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
//   } catch (error) {
//     logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—à—Ç–∏:", error);
//   }
// }

async function askForAction(emailDetails) {
  const { sender, subject, date, id } = emailDetails;

  // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
  const actionButtons = [
    { text: "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data: `reply_${id}` },
    { text: "GPT", callback_data: `send_gpt_${id}` },
    { text: "–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º", callback_data: `mark_read_${id}` },
    { text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data: `skip_${id}` },
    { text: "–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏", callback_data: `filter_${id}` },
  ];

  // –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  const inline_keyboard = [];
  for (let i = 0; i < actionButtons.length; i += 2) {
    inline_keyboard.push(actionButtons.slice(i, i + 2));
  }

  const options = {
    reply_markup: {
      inline_keyboard,
    },
    parse_mode: "Markdown",
  };

  const formattedDate = date.toLocaleString();

  const messageText = `–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏–π –ª–∏—Å—Ç:

**–í—ñ–¥:** ${sender}
**–¢–µ–º–∞:** ${subject}
**–î–∞—Ç–∞:** ${formattedDate}

–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑ —Ü–∏–º –ª–∏—Å—Ç–æ–º?`;

  await sendMessage(telegramChatId, messageText, options);
}

async function handleCallbackQuery(callbackQuery) {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;

  if (data.startsWith("reply_")) {
    const emailId = data.replace("reply_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await sendMessage(msg.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ª–∏—Å—Ç:");

      // –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
      bot.once("message", async (replyMsg) => {
        const replyText = replyMsg.text.trim();

        await gmailService.sendEmailReply(emailDetails.emailDetails, replyText);

        await sendMessage(msg.chat.id, "–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.");

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ª–∏—Å—Ç —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π
        await gmailService.markEmailAsRead(emailId);

        // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        delete pendingEmails[emailId];
        delete emailTimestamps[emailId];
      });
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("send_gpt_")) {
    const emailId = data.replace("send_gpt_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      const summary = await openaiService.summarizeEmail(emailDetails.content);
      await sendMessage(msg.chat.id, `–ü—ñ–¥—Å—É–º–æ–∫ –ª–∏—Å—Ç–∞:\n\n${summary}`);
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("mark_read_")) {
    const emailId = data.replace("mark_read_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await gmailService.markEmailAsRead(emailId);
      await sendMessage(msg.chat.id, "–õ–∏—Å—Ç –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π.");
      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("skip_")) {
    const emailId = data.replace("skip_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await sendMessage(msg.chat.id, "–õ–∏—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ.");
      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–∞–ª–∏—à–∞—é—á–∏ –π–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("filter_")) {
    const emailId = data.replace("filter_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Ç–æ–∫ Gmail
      const labels = await gmailService.getGmailLabels();

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –º—ñ—Ç–∫–∞–º–∏
      const labelButtons = labels.map((label) => ({
        text: label.name,
        callback_data: `label_${label.id}_${emailId}`,
      }));

      // –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
      const inline_keyboard = [];
      for (let i = 0; i < labelButtons.length; i += 2) {
        inline_keyboard.push(labelButtons.slice(i, i + 2));
      }

      const options = {
        reply_markup: {
          inline_keyboard,
        },
        parse_mode: "Markdown",
      };

      await sendMessage(
        msg.chat.id,
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Ç–∫—É –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ª–∏—Å—Ç–∞:",
        options
      );
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("label_")) {
    const [_, labelId, emailId] = data.split("_");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await gmailService.addLabelToEmail(emailId, labelId);
      await sendMessage(msg.chat.id, "–ú—ñ—Ç–∫—É –¥–æ–¥–∞–Ω–æ –¥–æ –ª–∏—Å—Ç–∞.");

      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  }
}
function startEmailChecking() {
  if (
    !process.env.TELEGRAM_CHAT_ID ||
    !process.env.OPENAI_API_KEY ||
    !fs.existsSync(TOKEN_PATH)
  ) {
    logger.error(
      "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞."
    );
    return;
  }

  if (emailCheckIntervalId) {
    clearInterval(emailCheckIntervalId);
  }
  emailCheckIntervalId = setInterval(() => {
    checkEmail();
  }, settings.updateInterval);
  logger.info(
    `–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—à—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${
      settings.updateInterval / 60000
    } —Ö–≤–∏–ª–∏–Ω.`
  );
}
module.exports = {
  checkEmail,
  handleCallbackQuery,
  sendDailySummary,
  startEmailChecking,
  scheduleDailySummary,
  settings,
};