// controllers/emailController.js

const gmailService = require("../services/gmailService");
const openaiService = require("../services/openaiService");
const calendarController = require("./calendarController");
const { sendMessage, bot } = require("../utils/bot");
const logger = require("../utils/logger");
const senderStore = require("../utils/senderStore");
const categoryStore = require("../utils/categoryStore");

const pendingEmails = {};
const emailTimestamps = {};
const dailyEmails = []; // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è
const telegramChatId = process.env.TELEGRAM_CHAT_ID;

async function checkEmail() {
  try {
    const messages = await gmailService.getUnreadEmails();

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
    const newMessages = messages.filter(
      (message) => !pendingEmails.hasOwnProperty(message.id)
    );

    // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤ –¥–æ 20
    const maxPendingEmails = 20;
    const availableSlots = maxPendingEmails - Object.keys(pendingEmails).length;
    const messagesToProcess = newMessages.slice(0, availableSlots);

    for (const message of messagesToProcess) {
      const emailDetails = await gmailService.getEmailDetails(message.id);
      const { id, sender, subject, date, content } = emailDetails;

      // –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –¥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É
      dailyEmails.push({
        id,
        sender,
        subject,
        date,
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ –≤—ñ–¥–æ–º–∏–π
      const senderCategory = senderStore.getSenderCategory(sender);

      if (!senderCategory) {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞
        pendingEmails[id] = { sender, subject, date, content, id };
        emailTimestamps[id] = Date.now();

        await askForSorting(sender, subject, date, content, id);
      } else {
        await handleEmailByCategory(senderCategory, content);
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ª–∏—Å—Ç —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π
        await gmailService.markEmailAsRead(id);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—Å—Ç–∏, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø–æ–Ω–∞–¥ 1 –¥–µ–Ω—å
    const oneDayInMillis = 24 * 60 * 60 * 1000;
    for (const emailId in emailTimestamps) {
      if (Date.now() - emailTimestamps[emailId] >= oneDayInMillis) {
        // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º
        delete pendingEmails[emailId];
        delete emailTimestamps[emailId];
      }
    }

    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—à—Ç–∏:", error);
  }
}

async function sendDailySummary() {
  if (dailyEmails.length === 0) {
    await sendMessage(telegramChatId, "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤.");
    return;
  }

  let summaryMessage = `–ü—ñ–¥—Å—É–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ—ó –ø–æ—à—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤: ${dailyEmails.length}\n\n`;

  for (const email of dailyEmails) {
    const formattedDate = email.date.toLocaleString();
    summaryMessage += `üìß **–í—ñ–¥:** ${email.sender}\n**–¢–µ–º–∞:** ${email.subject}\n**–î–∞—Ç–∞:** ${formattedDate}\n\n`;
  }

  const options = {
    parse_mode: "Markdown",
  };

  await sendMessage(telegramChatId, summaryMessage, options);

  // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—ñ–¥—Å—É–º–∫—É
  dailyEmails.length = 0;
}

async function askForSorting(
  emailSender,
  emailSubject,
  emailDate,
  emailContent,
  emailId
) {
  const categories = categoryStore.loadCategories();

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  const categoryButtons = categories.map((category) => ({
    text: category,
    callback_data: `category_${category}_${emailId}`,
  }));

  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
  categoryButtons.push(
    { text: "–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data: `new_category_${emailId}` },
    { text: "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ GPT", callback_data: `send_gpt_${emailId}` },
    { text: "–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ", callback_data: `mark_read_${emailId}` },
    { text: "–í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—Å—Ç", callback_data: `delete_email_${emailId}` }
  );

  // –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  const inline_keyboard = [];
  for (let i = 0; i < categoryButtons.length; i += 2) {
    inline_keyboard.push(categoryButtons.slice(i, i + 2));
  }

  const options = {
    reply_markup: {
      inline_keyboard,
    },
    parse_mode: "Markdown",
  };

  const formattedDate = emailDate.toLocaleString();

  const messageText = `–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏–π –ª–∏—Å—Ç:

**–í—ñ–¥:** ${emailSender}
**–¢–µ–º–∞:** ${emailSubject}
**–î–∞—Ç–∞:** ${formattedDate}

–Ø–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ü–µ–π –ª–∏—Å—Ç?`;

  await sendMessage(telegramChatId, messageText, options);
}

async function handleEmailByCategory(category, emailContent) {
  switch (category) {
    case "newsletter":
      await gmailService.unsubscribeFromNewsletter(emailContent);
      break;
    case "task":
      const task = extractTaskFromEmail(emailContent);
      if (task) {
        await calendarController.addTaskToCalendar(
          task.title,
          emailContent,
          task.dueDate
        );
      }
      break;
    case "important":
      await sendMessage(
        telegramChatId,
        '–õ–∏—Å—Ç –≤—ñ–¥–Ω–µ—Å–µ–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–í–∞–∂–ª–∏–≤–µ".'
      );
      break;
    case "other":
      await sendMessage(telegramChatId, '–õ–∏—Å—Ç –≤—ñ–¥–Ω–µ—Å–µ–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–Ü–Ω—à–µ".');
      break;
    default:
      await sendMessage(
        telegramChatId,
        `–õ–∏—Å—Ç –≤—ñ–¥–Ω–µ—Å–µ–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${category}".`
      );
      break;
  }
}

function extractTaskFromEmail(emailContent) {
  // –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –≤–∏–ª—É—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ª–∏—Å—Ç–∞
  // –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –æ–±'—î–∫—Ç { title: '–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è', dueDate: '2024-12-31T23:59:59Z' }
  return null;
}

async function handleCallbackQuery(callbackQuery) {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;

  if (data.startsWith("category_")) {
    const [_, category, emailId] = data.split("_");

    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      senderStore.saveSender(emailDetails.sender, category);
      await sendMessage(
        msg.chat.id,
        `–õ–∏—Å—Ç –≤—ñ–¥ ${emailDetails.sender} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é "${category}".`
      );
      await handleEmailByCategory(category, emailDetails.content);
      await gmailService.markEmailAsRead(emailId);

      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ª–∏—Å—Ç
      await checkEmail();
    }
  } else if (data.startsWith("send_gpt_")) {
    const emailId = data.replace("send_gpt_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      const summary = await openaiService.summarizeEmail(emailDetails.content);
      await sendMessage(msg.chat.id, `–ü—ñ–¥—Å—É–º–æ–∫ –ª–∏—Å—Ç–∞:\n\n${summary}`);
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("new_category_")) {
    const emailId = data.replace("new_category_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      // –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      await sendMessage(msg.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:");

      // –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
      bot.once("message", async (msg) => {
        const newCategory = msg.text.trim();

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        categoryStore.addCategory(newCategory);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –∑ –Ω–æ–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        senderStore.saveSender(emailDetails.sender, newCategory);

        await sendMessage(
          msg.chat.id,
          `–ö–∞—Ç–µ–≥–æ—Ä—ñ—é "${newCategory}" –¥–æ–¥–∞–Ω–æ. –õ–∏—Å—Ç –≤—ñ–¥ ${emailDetails.sender} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.`
        );
        await handleEmailByCategory(newCategory, emailDetails.content);

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ª–∏—Å—Ç —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π
        await gmailService.markEmailAsRead(emailId);

        // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        delete pendingEmails[emailId];
        delete emailTimestamps[emailId];
      });
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("mark_read_")) {
    const emailId = data.replace("mark_read_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await gmailService.markEmailAsRead(emailId);
      await sendMessage(msg.chat.id, "–õ–∏—Å—Ç –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π.");
      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ª–∏—Å—Ç
      await checkEmail();
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  } else if (data.startsWith("delete_email_")) {
    const emailId = data.replace("delete_email_", "");
    const emailDetails = pendingEmails[emailId];

    if (emailDetails) {
      await gmailService.deleteEmail(emailId);
      await sendMessage(msg.chat.id, "–õ–∏—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.");
      // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç –∑ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      delete pendingEmails[emailId];
      delete emailTimestamps[emailId];

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ª–∏—Å—Ç
      await checkEmail();
    } else {
      await sendMessage(
        msg.chat.id,
        "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª–∏—Å—Ç–∞."
      );
    }
  }
}

module.exports = {
  checkEmail,
  handleCallbackQuery,
  sendDailySummary, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
};
